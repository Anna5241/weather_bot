<?php

namespace Tests\Feature;

use App\Console\Commands\Telegram\CheckSubscriptionsCommand;
use App\Models\WeatherSubscription;
use Illuminate\Support\Collection;
use Mockery;
use Telegram\Bot\Objects\Update;
use Tests\TestCase;

class CheckSubscriptionsCommandTest extends TestCase
{
    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
     *
     * @return void
     */
    public function test_check_subscriptions_with_subscriptions()
    {
        // Arrange: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        $chatId = 12345;
        $subscriptions = [
            (object)['city' => 'Moscow'],
            (object)['city' => 'London'],
        ];

        // –ú–æ–∫–∞–µ–º WeatherSubscription, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤
        $weatherSubscriptionMock = Mockery::mock('alias:App\Models\WeatherSubscription');
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('get')
            ->andReturn(collect($subscriptions));

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –º–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å getUpdate –∏ replyWithMessage
        $command = Mockery::mock(CheckSubscriptionsCommand::class)->makePartial();

        // –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->andReturn($chatId);

        // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –º–æ–∫ Update
        $command->shouldReceive('getUpdate')->andReturn($update);

        // –û–∂–∏–¥–∞–µ–º –≤—ã–∑–æ–≤ replyWithMessage —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        $command->shouldReceive('replyWithMessage')
            ->once()
            ->with(Mockery::on(function ($argument) use ($subscriptions) {
                $text = $argument['text'];
                $parseMode = $argument['parse_mode'];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parse_mode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HTML
                if ($parseMode !== 'HTML') {
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (strpos($text, 'üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>') === false) {
                    return false;
                }
                foreach ($subscriptions as $subscription) {
                    if (strpos($text, "üåÜ –ì–æ—Ä–æ–¥: <b>{$subscription->city}</b>") === false) {
                        return false;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                return strpos($text, '‚ùå–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫: /unsubscribe_all_cities') !== false &&
                    strpos($text, 'üí£–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥: /unsubscribe_concrete_city') !== false;
            }));

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        $command->handle();

        // –ß—Ç–æ–±—ã PHPUnit –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
        $this->addToAssertionCount(1);
    }
}
