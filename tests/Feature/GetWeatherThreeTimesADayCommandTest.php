<?php

namespace Tests\Feature;

use App\Console\Commands\Telegram\GetWeatherThreeTimesADayCommand;
use App\Models\WeatherSubscription;
use Mockery;
use Telegram\Bot\Objects\Update;
use Tests\TestCase;

class GetWeatherThreeTimesADayCommandTest extends TestCase
{
    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    /**
     * –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥.
     */
    public function test_empty_city()
    {
        // Arrange
        $chatId = 11111;
        // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –≥–æ—Ä–æ–¥–∞
        $messageText = '/get_weather_three_times_a_day';

        // –ú–æ–∫–∞–µ–º Update: –ø–æ–ª—É—á–µ–Ω–∏–µ chatId –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->once()
            ->andReturn($chatId);
        $update->shouldReceive('getMessage->getText')
            ->once()
            ->andReturn($messageText);

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –º–æ–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–º–µ–Ω—ã getUpdate –∏ replyWithMessage
        $command = Mockery::mock(GetWeatherThreeTimesADayCommand::class)->makePartial();
        $command->shouldReceive('getUpdate')
            ->once()
            ->andReturn($update);

        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω replyWithMessage —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥
        $command->shouldReceive('replyWithMessage')
            ->once()
            ->with(\Mockery::on(function ($argument) {
                return isset($argument['text']) &&
                    $argument['text'] === '‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /get_weather_three_times_a_day –ú–æ—Å–∫–≤–∞';
            }));

        // Act
        $command->handle();

        // –§–∏–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        $this->addToAssertionCount(1);
    }

    /**
     * –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     */
    public function test_existing_subscription()
    {
        // Arrange
        $chatId = 22222;
        $city = 'Moscow';
        $messageText = '/get_weather_three_times_a_day ' . $city;

        // –ú–æ–∫–∞–µ–º Update
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->once()
            ->andReturn($chatId);
        $update->shouldReceive('getMessage->getText')
            ->once()
            ->andReturn($messageText);

        $command = Mockery::mock(GetWeatherThreeTimesADayCommand::class)->makePartial();
        $command->shouldReceive('getUpdate')
            ->once()
            ->andReturn($update);

        // –ú–æ–∫–∞–µ–º –º–æ–¥–µ–ª—å WeatherSubscription —á–µ—Ä–µ–∑ alias
        $weatherSubscriptionMock = Mockery::mock('alias:' . WeatherSubscription::class);

        // –ü–µ—Ä–≤–æ–π —Ü–µ–ø–æ—á–∫–æ–π: –≤—ã–∑–æ–≤ exists() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å true
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('city', $city)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('exists')
            ->once()
            ->andReturn(true);

        // –í—Ç–æ—Ä–æ–π —Ü–µ–ø–æ—á–∫–æ–π: –≤—ã–∑–æ–≤ first() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('city', $city)
            ->andReturnSelf();
        $fakeSubscription = (object)[
            'id' => 99,
            'city' => $city,
            'chat_id' => $chatId,
        ];
        $weatherSubscriptionMock->shouldReceive('first')
            ->once()
            ->andReturn($fakeSubscription);

        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω replyWithMessage —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $command->shouldReceive('replyWithMessage')
            ->once()
            ->with(\Mockery::on(function ($argument) use ($city, $fakeSubscription) {
                $expectedText = "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{$city}</b> (ID: {$fakeSubscription->id}).\n\n" .
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_subscriptions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫";
                return isset($argument['text']) &&
                    $argument['text'] === $expectedText &&
                    isset($argument['parse_mode']) &&
                    $argument['parse_mode'] === 'HTML';
            }));

        // Act
        $command->handle();

        $this->addToAssertionCount(1);
    }

    /**
     * –°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
     */
    public function test_new_subscription()
    {
        // Arrange
        $chatId = 33333;
        $city = 'London';
        $messageText = '/get_weather_three_times_a_day ' . $city;

        // –ú–æ–∫–∞–µ–º Update
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->once()
            ->andReturn($chatId);
        $update->shouldReceive('getMessage->getText')
            ->once()
            ->andReturn($messageText);

        $command = Mockery::mock(GetWeatherThreeTimesADayCommand::class)->makePartial();
        $command->shouldReceive('getUpdate')
            ->once()
            ->andReturn($update);

        // –ú–æ–∫–∞–µ–º –º–æ–¥–µ–ª—å WeatherSubscription —á–µ—Ä–µ–∑ alias
        $weatherSubscriptionMock = Mockery::mock('alias:' . WeatherSubscription::class);

        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: exists() –≤–µ—Ä–Ω–µ—Ç false
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('city', $city)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('exists')
            ->once()
            ->andReturn(false);

        // –ó–∞—Ç–µ–º, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ first(), –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è null
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('city', $city)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('first')
            ->once()
            ->andReturn(null);

        // –ü—Ä–∏ –≤—ã–∑–æ–≤–µ create() –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç-–ø–æ–¥–ø–∏—Å–∫—É
        $weatherSubscriptionMock->shouldReceive('create')
            ->once()
            ->with([
                'chat_id' => $chatId,
                'city'    => $city,
            ])
            ->andReturn((object)[
                'id' => 123,
                'chat_id' => $chatId,
                'city' => $city,
            ]);

        // –ò –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)
        $weatherSubscriptionMock->shouldReceive('where')
            ->with('chat_id', $chatId)
            ->andReturnSelf();
        $weatherSubscriptionMock->shouldReceive('count')
            ->once()
            ->andReturn(1);

        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω replyWithMessage —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        $command->shouldReceive('replyWithMessage')
            ->once()
            ->with(\Mockery::on(function ($argument) use ($city) {
                $expectedText = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {$city}.\n\n" .
                    "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 7:00, 14:00 –∏ 16:00.\n\n" .
                    "–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: 1\n" .
                    "üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫: /check_subscriptions\n" .
                    "üîï–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫: /unsubscribe_all_cities\n" .
                    "üîï–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥: /unsubscribe_concrete_city";
                return isset($argument['text']) &&
                    $argument['text'] === $expectedText &&
                    isset($argument['parse_mode']) &&
                    $argument['parse_mode'] === 'HTML';
            }));

        // Act
        $command->handle();

        $this->addToAssertionCount(1);
    }
}
