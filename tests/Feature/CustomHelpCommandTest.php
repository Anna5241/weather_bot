<?php


namespace Tests\Feature;

use App\Console\Commands\Telegram\CustomHelpCommand;
use Mockery;
use ReflectionClass;
use Telegram\Bot\Api;
use Tests\TestCase;

class CustomHelpCommandTest extends TestCase
{
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ telegram —á–µ—Ä–µ–∑ Reflection.
     *
     * @param CustomHelpCommand $command
     * @param Api $telegramInstance
     * @return void
     */
    protected function setTelegramProperty(CustomHelpCommand $command, Api $telegramInstance): void
    {
        $reflectedCommand = new ReflectionClass($command);
        $property = $reflectedCommand->getProperty('telegram');
        $property->setAccessible(true);
        $property->setValue($command, $telegramInstance);
    }

    /**
     * –¢–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã CustomHelpCommand.
     *
     * @return void
     */
    public function test_custom_help_command_displays_available_commands()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.
        $commandStart = Mockery::mock();
        $commandStart->shouldReceive('getDescription')
            ->andReturn('–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
        $commandWeather = Mockery::mock();
        $commandWeather->shouldReceive('getDescription')
            ->andReturn('–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É');

        // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å Telegram API.
        $commandsArray = [
            'start'   => $commandStart,
            'weather' => $commandWeather,
        ];

        // –ú–æ–∫–∞–µ–º Telegram API –∫–∞–∫ partial mock, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞–≤–∞–ª—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Telegram\Bot\Api.
        $telegramMock = Mockery::mock(Api::class)->makePartial();
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.
        $telegramMock->shouldAllowMockingProtectedMethods();
        $telegramMock->shouldReceive('getCommands')
            ->once()
            ->andReturn($commandsArray);

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –º–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã CustomHelpCommand, —á—Ç–æ–±—ã –ø–æ–¥–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ replyWithMessage.
        $command = Mockery::mock(CustomHelpCommand::class)->makePartial();
        $command->shouldReceive('replyWithMessage')
            ->once()
            ->with(\Mockery::on(function ($argument) {
                $text = $argument['text'];

                // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
                $expectedHeader = "üîπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n";
                $expectedStart  = "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n";
                $expectedWeather = "/weather - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n";
                $expectedFooter = "\n‚Ñπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º";

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ.
                return strpos($text, $expectedHeader) !== false &&
                    strpos($text, $expectedStart) !== false &&
                    strpos($text, $expectedWeather) !== false &&
                    strpos($text, $expectedFooter) !== false &&
                    $argument['parse_mode'] === 'HTML' &&
                    $argument['disable_web_page_preview'] === true;
            }))
            ->andReturnNull();

        // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à partial mock Telegram API —á–µ—Ä–µ–∑ Reflection.
        $this->setTelegramProperty($command, $telegramMock);

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É.
        $command->handle();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PHPUnit.
        $this->addToAssertionCount(1);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }
}

