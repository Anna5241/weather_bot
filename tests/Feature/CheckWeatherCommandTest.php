<?php

namespace Tests\Feature;

use App\Console\Commands\Telegram\CheckWeatherCommand;
use App\Jobs\ProcessImageGenerationWithWeather;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Bus;
use Mockery;
use ReflectionClass;
use Telegram\Bot\Api;
use Telegram\Bot\Objects\Update;
use Tests\TestCase;

class CheckWeatherCommandTest extends TestCase
{
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ telegram —á–µ—Ä–µ–∑ Reflection.
     *
     * @param CheckWeatherCommand $command
     * @param Api $telegramMock
     * @return void
     */
    protected function setTelegramProperty(CheckWeatherCommand $command, Api $telegramMock): void
    {
        $reflectedCommand = new ReflectionClass($command);
        $property = $reflectedCommand->getProperty('telegram');
        $property->setAccessible(true);
        $property->setValue($command, $telegramMock);
    }

    /**
     * –¢–µ—Å—Ç: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥.
     *
     * @return void
     */
    public function test_check_weather_no_city()
    {
        // Arrange: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        $chatId = 12345;
        // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
        $messageText = '/check_weather';

        // –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->once()
            ->andReturn($chatId);
        $update->shouldReceive('getMessage->getText')
            ->once()
            ->andReturn($messageText);

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –º–æ–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–º–µ–Ω—ã –º–µ—Ç–æ–¥–∞ getUpdate.
        $command = Mockery::mock(CheckWeatherCommand::class)->makePartial();
        $command->shouldReceive('getUpdate')
            ->once()
            ->andReturn($update);

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Telegram API.
        $telegramMock = Mockery::mock(Api::class);
        $telegramMock->shouldReceive('sendMessage')
            ->once()
            ->with([
                'chat_id' => $chatId,
                'text'    => "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä: /check_weather –ú–æ—Å–∫–≤–∞",
            ]);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Reflection –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ telegram.
        $this->setTelegramProperty($command, $telegramMock);

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        $response = $command->handle();

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è JSON-–æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º success.
        $this->assertInstanceOf(JsonResponse::class, $response);
        $this->assertEquals(['status' => 'success'], $response->getData(true));

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PHPUnit.
        $this->addToAssertionCount(1);
    }

    /**
     * –¢–µ—Å—Ç: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–≥–æ–¥—ã –∏ –¥–∏—Å–ø–µ—Ç—á–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ.
     *
     * @return void
     */
    public function test_check_weather_with_valid_city()
    {
        // Arrange: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        $chatId = 67890;
        // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ú–æ—Å–∫–≤–∞".
        $inputCity = '–ú–æ—Å–∫–≤–∞';
        $messageText = '/check_weather ' . $inputCity;

        // –§–µ–π–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π.
        Bus::fake();

        // –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        $update = Mockery::mock(Update::class);
        $update->shouldReceive('getMessage->getChat->getId')
            ->once()
            ->andReturn($chatId);
        $update->shouldReceive('getMessage->getText')
            ->once()
            ->andReturn($messageText);

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –º–æ–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–º–µ–Ω—ã –º–µ—Ç–æ–¥–∞ getUpdate.
        $command = Mockery::mock(CheckWeatherCommand::class)->makePartial();
        $command->shouldReceive('getUpdate')
            ->once()
            ->andReturn($update);

        // –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram API.
        $telegramMock = Mockery::mock(Api::class);
        $expectedText = "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {$inputCity}...</b>\n\nüå§Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!";
        $telegramMock->shouldReceive('sendMessage')
            ->once()
            ->with(\Mockery::on(function ($argument) use ($chatId, $expectedText) {
                return $argument['chat_id'] === $chatId &&
                    $argument['text'] === $expectedText &&
                    isset($argument['parse_mode']) &&
                    $argument['parse_mode'] === 'HTML';
            }));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Reflection –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ telegram.
        $this->setTelegramProperty($command, $telegramMock);

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        $response = $command->handle();

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è JSON-–æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º success.
        $this->assertInstanceOf(JsonResponse::class, $response);
        $this->assertEquals(['status' => 'success'], $response->getData(true));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ ProcessImageGenerationWithWeather –±—ã–ª–æ –∑–∞–¥–∏—Å–ø–∞—Ç—á–µ–Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        Bus::assertDispatched(ProcessImageGenerationWithWeather::class, function ($job) use ($chatId, $inputCity) {
            $jobReflection = new ReflectionClass($job);

            // –ü–æ–ª—É—á–∞–µ–º –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ "chatId"
            $chatIdProperty = $jobReflection->getProperty('chatId');
            $chatIdProperty->setAccessible(true);
            $jobChatId = $chatIdProperty->getValue($job);

            // –ü–æ–ª—É—á–∞–µ–º –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ "city"
            $cityProperty = $jobReflection->getProperty('city');
            $cityProperty->setAccessible(true);
            $jobCity = $cityProperty->getValue($job);

            return $jobChatId === $chatId && $jobCity === $inputCity;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
        $this->addToAssertionCount(1);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }
}
